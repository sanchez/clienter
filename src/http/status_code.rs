#[derive(Debug, PartialEq)]
pub enum StatusCode {
    Continue100,
    SwitchingProtocols101,
    Processing102,
    EarlyHints103,

    Ok200,
    Created201,
    Accepted202,
    NonAuthoritativeInformation203,
    NoContent204,
    ResetContent205,
    PartialContent206,
    MultiStatus207,
    AlreadyReported208,
    ImUsed226,

    MultipleChoices300,
    MovedPermanently301,
    Found302,
    SeeOther303,
    NotModified304,
    UseProxy305,
    TemporaryRedirect307,
    PermanentRedirect308,

    BadRequest400,
    Unauthorized401,
    PaymentRequired402,
    Forbidden403,
    NotFound404,
    MethodNotAllowed405,
    NotAcceptable406,
    ProxyAuthenticationRequired407,
    RequestTimeout408,
    Conflict409,
    Gone410,
    LengthRequired411,
    PrecondiditionFailed412,
    PayloadTooLarge413,
    UriTooLong414,
    UnsupportedMediaType415,
    RangeNotSatisfiable416,
    ExpectationFailed417,
    MisdirectedRequest421,
    UnprocessableEntity422,
    Locked423,
    FailedDependency424,
    TooEarly425,
    UpgradeRequired426,
    PreconditionRequired428,
    TooManyRequests429,
    RequestHeaderFieldsTooLarge431,
    UnavailableForLegalReasons451,

    InternalServerError500,
    NotImplemented501,
    BadGateway502,
    ServiceUnavailable503,
    GatewayTimeout504,
    HttpVersionNotSupported505,
    VariantAlsoNegotiates506,
    InsufficientStorage507,
    LoopDetected508,
    NotExtended510,
    NetworkAuthenticationRequired511,
}

impl StatusCode {
    pub fn is_success(&self) -> bool {
        match self {
            StatusCode::Ok200 => true,
            StatusCode::Created201 => true,
            StatusCode::Accepted202 => true,
            StatusCode::NonAuthoritativeInformation203 => true,
            StatusCode::NoContent204 => true,
            StatusCode::ResetContent205 => true,
            StatusCode::PartialContent206 => true,
            StatusCode::MultiStatus207 => true,
            StatusCode::AlreadyReported208 => true,
            StatusCode::ImUsed226 => true,
            _ => false,
        }
    }
}

impl TryFrom<u16> for StatusCode {
    type Error = &'static str;

    fn try_from(status_code: u16) -> Result<Self, Self::Error> {
        match status_code {
            100 => Ok(StatusCode::Continue100),
            101 => Ok(StatusCode::SwitchingProtocols101),
            102 => Ok(StatusCode::Processing102),
            103 => Ok(StatusCode::EarlyHints103),

            200 => Ok(StatusCode::Ok200),
            201 => Ok(StatusCode::Created201),
            202 => Ok(StatusCode::Accepted202),
            203 => Ok(StatusCode::NonAuthoritativeInformation203),
            204 => Ok(StatusCode::NoContent204),
            205 => Ok(StatusCode::ResetContent205),
            206 => Ok(StatusCode::PartialContent206),
            207 => Ok(StatusCode::MultiStatus207),
            208 => Ok(StatusCode::AlreadyReported208),
            226 => Ok(StatusCode::ImUsed226),

            300 => Ok(StatusCode::MultipleChoices300),
            301 => Ok(StatusCode::MovedPermanently301),
            302 => Ok(StatusCode::Found302),
            303 => Ok(StatusCode::SeeOther303),
            304 => Ok(StatusCode::NotModified304),
            305 => Ok(StatusCode::UseProxy305),
            307 => Ok(StatusCode::TemporaryRedirect307),
            308 => Ok(StatusCode::PermanentRedirect308),

            400 => Ok(StatusCode::BadRequest400),
            401 => Ok(StatusCode::Unauthorized401),
            402 => Ok(StatusCode::PaymentRequired402),
            403 => Ok(StatusCode::Forbidden403),
            404 => Ok(StatusCode::NotFound404),
            405 => Ok(StatusCode::MethodNotAllowed405),
            406 => Ok(StatusCode::NotAcceptable406),
            407 => Ok(StatusCode::ProxyAuthenticationRequired407),
            408 => Ok(StatusCode::RequestTimeout408),
            409 => Ok(StatusCode::Conflict409),
            410 => Ok(StatusCode::Gone410),
            411 => Ok(StatusCode::LengthRequired411),
            412 => Ok(StatusCode::PrecondiditionFailed412),
            413 => Ok(StatusCode::PayloadTooLarge413),
            414 => Ok(StatusCode::UriTooLong414),
            415 => Ok(StatusCode::UnsupportedMediaType415),
            416 => Ok(StatusCode::RangeNotSatisfiable416),
            417 => Ok(StatusCode::ExpectationFailed417),
            421 => Ok(StatusCode::MisdirectedRequest421),
            422 => Ok(StatusCode::UnprocessableEntity422),
            423 => Ok(StatusCode::Locked423),
            424 => Ok(StatusCode::FailedDependency424),
            425 => Ok(StatusCode::TooEarly425),
            426 => Ok(StatusCode::UpgradeRequired426),
            428 => Ok(StatusCode::PreconditionRequired428),
            429 => Ok(StatusCode::TooManyRequests429),
            431 => Ok(StatusCode::RequestHeaderFieldsTooLarge431),
            451 => Ok(StatusCode::UnavailableForLegalReasons451),

            500 => Ok(StatusCode::InternalServerError500),
            501 => Ok(StatusCode::NotImplemented501),
            502 => Ok(StatusCode::BadGateway502),
            503 => Ok(StatusCode::ServiceUnavailable503),
            504 => Ok(StatusCode::GatewayTimeout504),
            505 => Ok(StatusCode::HttpVersionNotSupported505),
            506 => Ok(StatusCode::VariantAlsoNegotiates506),
            507 => Ok(StatusCode::InsufficientStorage507),
            508 => Ok(StatusCode::LoopDetected508),
            510 => Ok(StatusCode::NotExtended510),
            511 => Ok(StatusCode::NetworkAuthenticationRequired511),
            _ => Err("Unknown status code"),
        }
    }
}
